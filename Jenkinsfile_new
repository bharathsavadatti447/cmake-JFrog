pipeline {
    agent { label 'Node-Linux' }

    environment {
        GIT_REPO = 'https://github.com/bharathsavadatti447/cmake-JFrog.git'
        BRANCH = 'main'

        // SonarCloud Configuration
        SONARQUBE_ENV = 'SonarCloud'
        SONAR_ORGANIZATION = 'bharathsavadatti447'
        SONAR_PROJECT_KEY = 'bharathsavadatti447_cmake_project'
    }

    stages {
        stage('Prepare Tools') {
            steps {
                echo 'üîß Installing required tools for Ubuntu...'
                sh '''
                    set -e

                    # Update system
                    sudo apt-get update -y

                    # Python3 and pip
                    if ! command -v pip3 &>/dev/null; then
                        sudo apt-get install -y python3 python3-pip
                    fi

                    # cmakelint setup using venv to avoid PEP 668 restriction
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install --upgrade pip
                    pip install cmakelint
                    deactivate

                    # dos2unix
                    if ! command -v dos2unix &>/dev/null; then
                        sudo apt-get install -y dos2unix
                    fi

                    # CMake
                    if ! command -v cmake &>/dev/null; then
                        sudo apt-get install -y cmake
                    fi

                    # GCC/G++
                    if ! command -v gcc &>/dev/null; then
                        sudo apt-get install -y build-essential
                    fi
                '''
            }
        }

        stage('Clean Workspace') {
            steps {
                echo "Cleaning Workspace..."
                deleteDir()
            }
        }

        stage('Checkout') {
            steps {
                echo "Cloning repository from ${GIT_REPO} (branch: ${BRANCH})"
                git branch: "${BRANCH}", url: "${GIT_REPO}"
            }
        }

        stage('Lint') {
            steps {
                echo 'üîç Running lint checks on main.c...'
                sh '''
                    . venv/bin/activate
                    if [ -f src/main.c ]; then
                        cmakelint src/main.c > lint_report.txt
                    else
                        echo "main.c not found!"
                        exit 1
                    fi
                    deactivate
                '''
            }
            post {
                always {
                    archiveArtifacts artifacts: 'lint_report.txt', fingerprint: true
                    fingerprint 'src/main.c'
                }
            }
        }

        stage('Build') {
            steps {
                echo 'Building project with CMake...'
                sh '''
                    if [ -f CMakeLists.txt ]; then
                        mkdir -p build
                        cd build
                        cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
                        make -j$(nproc)
                        cp compile_commands.json ..
                    else
                        echo "CMakeLists.txt not found!"
                        exit 1
                    fi
                '''
            }
        }

        stage('Unit Tests') {
            steps {
                echo 'Running unit tests...'
                sh '''
                    if [ -d build ]; then
                        cd build
                        ctest --output-on-failure
                    else
                        echo "Build directory not found!"
                        exit 1
                    fi
                '''
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo 'Running SonarQube (SonarCloud) analysis...'
                withSonarQubeEnv("${SONARQUBE_ENV}") {
                    sh '''
                        sonar-scanner \
                          -Dsonar.organization=${SONAR_ORGANIZATION} \
                          -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                          -Dsonar.sources=src \
                          -Dsonar.cfamily.compile-commands=compile_commands.json \
                          -Dsonar.host.url=https://sonarcloud.io \
                          -Dsonar.sourceEncoding=UTF-8
                    '''
                }
            }
        }

        stage('Upload to Artifactory') {
            steps {
                echo 'Uploading binary to Artifactory...'
                withCredentials([string(credentialsId: 'JFrog-Jenkins', variable: 'ACCESS_TOKEN')]) {
                    sh '''
                        ARTIFACT_PATH="build/myfirmware.bin"
                        ARTIFACT_NAME=$(basename "$ARTIFACT_PATH")

                        if [ ! -f "$ARTIFACT_PATH" ]; then
                            echo "Artifact file not found at $ARTIFACT_PATH"
                            exit 1
                        fi

                        UPLOAD_URL="http://13.222.155.192:8081/artifactory/cmake-snapshot/$ARTIFACT_NAME"
                        echo "Uploading $ARTIFACT_NAME to $UPLOAD_URL ..."

                        HTTP_RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" \
                            -H "Authorization: Bearer ${ACCESS_TOKEN}" \
                            -T "$ARTIFACT_PATH" \
                            "$UPLOAD_URL")

                        if [ "$HTTP_RESPONSE" -ge 200 ] && [ "$HTTP_RESPONSE" -lt 300 ]; then
                            echo "Upload successful (HTTP $HTTP_RESPONSE)"
                        else
                            echo "Upload failed with HTTP code $HTTP_RESPONSE"
                            exit 1
                        fi
                    '''
                }
            }
        }
    }

    post {
        always {
            echo 'üèÅ Pipeline finished.'
        }
        success {
            echo 'Build, lint, and SonarCloud analysis completed successfully!'
            echo 'Archiving build artifacts...'
            archiveArtifacts artifacts: 'build/*', onlyIfSuccessful: true
        }
        failure {
            echo 'Pipeline failed. Check logs or SonarCloud dashboard.'
        }
    }
}
